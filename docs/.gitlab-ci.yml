

### BEGIN MKDOCS TEMPLATE ###
### WARNING, DO NOT UPDATE CONTENT BETWEEN MKDOCS TEMPLATE TAG !###
### Modified content will be overwritten when updating.###

---
# GLOBAL CONFIGURATION
# =============================================================================
# YAML Anchors
# -----------------------------------------------------------------------------
# This CI file haevily make use of YAML anchors for multiple reasons:
#   - Avoid writing twice the same block of codes
#   - Resuse block of codes
#   - Make the CI more generic and easily extensible or modifiable
# See https://docs.gitlab.com/ee/ci/yaml/README.html#anchors

# Define base workflow
# https://docs.gitlab.com/ee/ci/yaml/README.html#workflow
workflow:
  rules:
    # Do not run CI when commit title have
    # WIP, NO-CI or ðŸš§ (gitmoji for "work in progress", aka :construction:)
    - if: |
        $CI_COMMIT_TITLE =~ /.*WIP.*/ ||
        $CI_COMMIT_TITLE =~ /.*NO-CI.*/ ||
        $CI_COMMIT_TITLE =~ /.*ðŸš§.*/
      when: never
    # Run the CI otherwise (depending on `only/except` key per jobs)
    - when: always

# Stages jobs will pass through with anchors to avoid updating stage in multiple
# place within this file. Now renaming a stage can be done directly after the
# anchor name below.
# https://docs.gitlab.com/ee/ci/yaml/README.html#stage
stages:
  - &pre_test pre_test
  - &test test
  - &build build
  - &deploy deploy
  - &post_deploy post_deploy

# Global variables shared for all jobs
# https://docs.gitlab.com/ee/ci/yaml/README.html#variables
variables:
  PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/pip"

# Images anchors
# -----------------------------------------------------------------------------
# https://docs.gitlab.com/ee/ci/yaml/README.html#image
# Basic docker image -> docker:latest image
.image_docker: &image_docker
  image: docker:latest

# Before scripts anchors
# -----------------------------------------------------------------------------
# https://docs.gitlab.com/ee/ci/yaml/README.html#before_script
.before_script_python_dependencies: &before_script_python_dependencies
  # Add python dependencies
  - apk update
  # Install base package required for mkdocs builds
  - apk add --no-cache --update-cache
      build-base
      python3-dev
      py3-pip
      py3-virtualenv
      bash
      git
      gcc
      musl-dev
      jpeg-dev
      zlib-dev
      libffi-dev
      cairo-dev
      pango-dev
      gdk-pixbuf
      jpeg-dev
      zlib-dev
      freetype-dev
      lcms2-dev
      openjpeg-dev
      tiff-dev
      tk-dev
      tcl-dev
      harfbuzz-dev
      fribidi-dev
      chromium
  # Create virtual environment
  - virtualenv .venv
  # Activate virtual environment
  - source .venv/bin/activate

.before_script_prepare_deployment: &before_script_prepare_deployment
  # Add rsync dependencies
  - apk update
  - apk add --no-cache --update-cache
      rsync
      git
  # Ensure ssh configuration folder exists
  - mkdir -p ~/.ssh
  # Ensure permission on this folder are right
  - chmod 700 ~/.ssh
  # Trust the perso LIRIS website
  - echo "${SSH_KNOWN_HOSTS}" > ~/.ssh/known_hosts
  # Ensure permission on the previously written file are right
  - chmod 600 ~/.ssh/known_hosts
  # Start the SSH agent
  - eval $(ssh-agent -s)
  # Add the private SSH key to be able to connect to the perso LIRIS website
  - echo "${SSH_PRIVATE_KEY}" | tr -d '' | ssh-add -

.before_script_export_variable: &before_script_export_variable
  # Update values of some variables depending on the CI_DEPLOY_TYPE
  # This could be shortened but gitlab-ci does not support bash variable substitution
  - |
    case ${CI_DEPLOY_TYPE} in
      "DEV")
        if [[ -n "${SSH_KNOWN_HOSTS_DEV}" ]];
        then
          export SSH_KNOWN_HOSTS="${SSH_KNOWN_HOSTS_DEV}"
        fi
        if [[ -n "${SSH_PRIVATE_KEY_DEV}" ]];
        then
          export SSH_PRIVATE_KEY="${SSH_PRIVATE_KEY_DEV}"
        fi
        if [[ -n "${ONLINE_DEST_DEV}" ]];
        then
          export ONLINE_DEST="${ONLINE_DEST_DEV}"
        fi
        if [[ -n "${RSYNC_DEST_DEV}" ]];
        then
          export RSYNC_DEST="${RSYNC_DEST_DEV}"
        fi
      ;;
      "PRE_PROD")
        if [[ -n "${SSH_KNOWN_HOSTS_PRE_PROD}" ]];
        then
          export SSH_KNOWN_HOSTS="${SSH_KNOWN_HOSTS_PRE_PROD}"
        fi
        if [[ -n "${SSH_PRIVATE_KEY_PRE_PROD}" ]];
        then
          export SSH_PRIVATE_KEY="${SSH_PRIVATE_KEY_PRE_PROD}"
        fi
        if [[ -n "${ONLINE_DEST_PRE_PROD}" ]];
        then
          export ONLINE_DEST="${ONLINE_DEST_PRE_PROD}"
        fi
        if [[ -n "${RSYNC_DEST_PRE_PROD}" ]];
        then
          export RSYNC_DEST="${RSYNC_DEST_PRE_PROD}"
        fi
      ;;
      "PROD")
        if [[ -n "${SSH_KNOWN_HOSTS_PROD}" ]];
        then
          export SSH_KNOWN_HOSTS="${SSH_KNOWN_HOSTS_PROD}"
        fi
        if [[ -n "${SSH_PRIVATE_KEY_PROD}" ]];
        then
          export SSH_PRIVATE_KEY="${SSH_PRIVATE_KEY_PROD}"
        fi
        if [[ -n "${ONLINE_DEST_PROD}" ]];
        then
          export ONLINE_DEST="${ONLINE_DEST_PROD}"
        fi
        if [[ -n "${RSYNC_DEST_PROD}" ]];
        then
          export RSYNC_DEST="${RSYNC_DEST_PROD}"
        fi
      ;;
      *)
        echo -e "[31mERROR - Variable \`CI_DEPLOY_TYPE\` is not defined !"
        return 1
      ;;
    esac

# Only anchors
# -----------------------------------------------------------------------------
# https://docs.gitlab.com/ee/ci/yaml/README.html#only
# List all names of refs that can be used with key (only|except):refs using
# anchors to avoid having to modify multiple times. Refs are:
# - Branches names based on git flow: https://danielkummer.github.io/git-flow-cheatsheet/
# - merge_requests (https://docs.gitlab.com/ee/ci/yaml/README.html#onlyexcept-basic)
# - tags (https://docs.gitlab.com/ee/ci/yaml/README.html#onlyexcept-basic)
.refs_names:
  - &ref_release /release-*/
  - &ref_feature /feature-*/
  - &ref_hotfix /hotfix-*/
  - &ref_bugfix /bugfix-*/
  - &ref_develop develop
  - &ref_master master
  - &ref_merge_requests merge_requests
  - &ref_tags tags

# Specify on which branch, tags or on merge_requests CI should be done.
# Jobs under only_dev anchor will be run if branch name are compliant with git
# flow branch which are not `develop` neither `master` and will be run on
# merge_request
.only_dev: &only_dev
  only:
    refs:
      -  *ref_release
      -  *ref_feature
      -  *ref_hotfix
      -  *ref_bugfix
      -  *ref_merge_requests

# Jobs under only_pre_prod anchor will be run on `develop` (i.e. pre-release)
# and `master` (release) branch.
.only_pre_prod: &only_pre_prod
  only:
    refs:
      - *ref_develop
      - *ref_master

# Jobs under only_prod anchor will be run on tagged commit.
.only_prod: &only_prod
  only:
    refs:
      - *ref_tags

# Jobs under only_trigger anchor will be run on `develop` (i.e. pre-release)
# `master` (release) branch and tagged commit.
.only_trigger: &only_trigger
  only:
    refs:
      - *ref_develop
      - *ref_master
      - *ref_tags

# Tag anchors
# -----------------------------------------------------------------------------
# https://docs.gitlab.com/ee/ci/yaml/README.html#tag
# Run jobs in regular docker
.tag_docker: &tag_docker
  tags:
    - docker

# Stages anchors
# -----------------------------------------------------------------------------
# https://docs.gitlab.com/ee/ci/yaml/README.html#stage
# This can be seen as overbloated while overuse of YAML anchors, but the
# advantage is that if we rename a stage, we will just need to rename it at the
# start of this CI.
.stage_pre_test: &stage_pre_test
  stage: *pre_test

.stage_test: &stage_test
  stage: *test

.stage_build: &stage_build
  stage: *build

.stage_deploy: &stage_deploy
  stage: *deploy

.stage_post_deploy: &stage_post_deploy
  stage: *post_deploy

# Cache anchors
# -----------------------------------------------------------------------------
# https://docs.gitlab.com/ee/ci/yaml/README.html#cache
# Setup a global cache to avoid having to reinstall pip and package dependencies
# every time.
# **REMARK** For this to work, runners must be on the same server and docker
# executor must mount /cache
.cache_python: &cache_python
  cache:
    # Cache dependencies shared within the same branche
    # https://docs.gitlab.com/ee/ci/yaml/README.html#cachekey
    key: "$CI_COMMIT_REF_NAME"
    # Let us cache python dependencies
    # https://docs.gitlab.com/ee/ci/caching/#caching-python-dependencies
    paths:
      - .cache/pip
      - .venv/
    # Save cache all the time, even if jobs failed
    # https://docs.gitlab.com/ee/ci/yaml/README.html#cachewhen
    when: always

.cache_python_pull: &cache_python_pull
  cache:
    # Cache dependencies shared across all branches but separated by jobs
    # https://docs.gitlab.com/ee/ci/yaml/README.html#cachekey
    key: "$CI_COMMIT_REF_NAME"
    # Let us cache python dependencies
    # https://docs.gitlab.com/ee/ci/caching/#caching-python-dependencies
    paths:
      - .cache/pip
      - .venv/
    # Setup policy to only pull python cache when we know jobs does not update
    # content of python cache.
    # https://docs.gitlab.com/ee/ci/yaml/README.html#cachepolicy
    policy: pull

# =============================================================================
# CI JOBS
# =============================================================================
# Jobs in pre_test stage
# -----------------------------------------------------------------------------
# Template jobs script to ensure required variables are sets.
.script_pre_test_ensure_variable: &script_pre_test_ensure_variable
  <<: *tag_docker
  <<: *image_docker
  <<: *stage_pre_test
  before_script:
    - *before_script_export_variable
  script:
    - export ERROR="false"
    - |
      if [[ -z "${SSH_KNOWN_HOSTS}" ]]
      then
        echo -e "[31mERROR - Variable \`SSH_KNOWN_HOSTS_${CI_DEPLOY_TYPE})\` is not defined !"
        export ERROR="true"
      fi
    - |
      if [[ -z "${SSH_PRIVATE_KEY}" ]]
      then
        echo -e "[31mERROR - Variable \`SSH_PRIVATE_KEY_${CI_DEPLOY_TYPE}\` is not defined !"
        export ERROR="true"
      fi
    - |
      if [[ -z "${ONLINE_DEST}" ]]
      then
        echo -e "[31mERROR - Variable \`ONLINE_DEST_${CI_DEPLOY_TYPE}\` is not defined !"
        export ERROR="true"
      fi
    - |
      if [[ -z "${RSYNC_DEST}" ]]
      then
        echo -e "[31mERROR - Variable \`RSYNC_DEST_${CI_DEPLOY_TYPE}\` is not defined !"
        export ERROR="true"
      fi
    - |
      if [[ "${ERROR}" == "true" ]]
      then
        echo -e "[31mERROR - At least one required variable is not defined !"
        return 1
      fi

# Set variables for the dev branches CI.
pre_test_dev:
  <<: *script_pre_test_ensure_variable
  <<: *only_dev
  variables:
    CI_DEPLOY_TYPE: "DEV"

# Set variables for the pre-prod branches CI (master and develop).
pre_test_pre_prod:
  <<: *script_pre_test_ensure_variable
  <<: *only_pre_prod
  variables:
    CI_DEPLOY_TYPE: "PRE_PROD"

# Set variables for the prod CI, i.e. CI on tags.
pre_test_prod:
  <<: *script_pre_test_ensure_variable
  <<: *only_prod
  variables:
    CI_DEPLOY_TYPE: "PROD"

# Jobs in test stage
# -----------------------------------------------------------------------------
test_build_local:
  <<: *tag_docker
  <<: *image_docker
  <<: *cache_python
  <<: *stage_test
  before_script:
    - *before_script_python_dependencies
  script:
    # Install python test requirements
    - pip3 install -r requirements.docs.txt
    # Build local documentation
    -  mkdocs build -f mkdocs.local.yml -d site_local
    # If everything went right, remove build site
    - rm -rf site_local

test_build_monorepo:
  <<: *tag_docker
  <<: *image_docker
  <<: *cache_python
  <<: *stage_test
  before_script:
    - *before_script_python_dependencies
  script:
    # Install python test requirements
    - pip3 install -r requirements.docs.txt
    # Build local documentation
    -  mkdocs build -d site_monorepo
    # If everything went right, remove build site
    - rm -rf site_monorepo

# Jobs in build stage
# -----------------------------------------------------------------------------
build_html:
  <<: *tag_docker
  <<: *image_docker
  <<: *cache_python_pull
  <<: *stage_build
  before_script:
    - *before_script_python_dependencies
  script:
    # Install python documentations requirements
    - pip3 install -r requirements.docs.txt
    # Build the documentation
    - mkdocs build
  artifacts:
    paths:
      - site/

build_pdf:
  before_script:
    - *before_script_python_dependencies
  <<: *tag_docker
  <<: *image_docker
  <<: *cache_python_pull
  <<: *stage_build
  script:
    # Install python documentations requirements
    - pip3 install -r requirements.docs.txt
    # Export a variable to build the PDF of the documentation
    - export ENABLE_PDF_EXPORT=1
    # Build the documentation
    - mkdocs build
    - cp docs/versions.json site/
  artifacts:
    paths:
      - docs/docs.pdf

# Jobs in deploy stage
# -----------------------------------------------------------------------------
# Template jobs script deploy previously built html documentation.
.script_deploy_html: &script_deploy_html
  <<: *tag_docker
  <<: *image_docker
  <<: *stage_deploy
  needs:
    - build_html
  before_script:
    - *before_script_export_variable
    - *before_script_prepare_deployment
  script:
    - git fetch --all
    - export LAST_TAG="$(git describe --tags `git rev-list --tags --max-count=1`)"
    - export LAST_TAG="${LAST_TAG/v/}"
    - export LAST_TAG="${LAST_TAG%.*}"
    - export RSYNC_PATH="/${PROJECT_PATH}${LAST_TAG}"
    - export ONLINE_PATH="${ONLINE_DEST}${PROJECT_PATH}${LAST_TAG}"
    - mkdir -p "tmp/${RSYNC_PATH}"
    - cp site/versions.json versions.json
    - mv site/* "tmp/${RSYNC_PATH}/"
    - rsync -avz "tmp/" "${RSYNC_DEST}"
    - echo -e "
      <!DOCTYPE html>

      <html>

      <head>

        <meta charset='utf-8'>

        <title>Redirecting</title>

        <noscript>

          <meta http-equiv='refresh' content='1; url=${ONLINE_PATH}' />

        </noscript>

        <script>

          window.location.replace('${ONLINE_PATH}');

        </script>

      </head>

      <body>

        Redirecting to <a href='${ONLINE_PATH}'>${ONLINE_PATH}</a>...

      </body>

      </html>" > index.html
    - rsync -avz index.html "${RSYNC_DEST}${PROJECT_PATH}/"
    - rsync -avz versions.json "${RSYNC_DEST}${PROJECT_PATH}/"

deploy_html_dev:
  <<: *script_deploy_html
  <<: *only_dev
  variables:
    CI_DEPLOY_TYPE: "PRE_PROD"
    PROJECT_PATH: ${CI_COMMIT_REF_NAME%-*}/$CI_PROJECT_PATH/

deploy_html_pre_prod:
  <<: *script_deploy_html
  <<: *only_pre_prod
  variables:
    CI_DEPLOY_TYPE: "PRE_PROD"
    PROJECT_PATH: ${CI_COMMIT_REF_NAME%-*}/$CI_PROJECT_PATH/

deploy_html_prod:
  <<: *script_deploy_html
  <<: *only_prod
  variables:
    CI_DEPLOY_TYPE: "PROD"
    PROJECT_PATH: ${CI_COMMIT_REF_NAME%-*}/$CI_PROJECT_PATH/

.script_deploy_pdf: &script_deploy_pdf
  <<: *tag_docker
  <<: *image_docker
  <<: *cache_python
  <<: *stage_deploy
  needs:
    - build_pdf
  before_script:
    - *before_script_export_variable
    - *before_script_prepare_deployment
  script:
    - mkdir -p "tmp/${CI_PROJECT_PATH}"
    - mv "docs/docs.pdf" "tmp/${CI_PROJECT_PATH}/${CI_PROJECT_NAME}.pdf"
    - rsync -avz "tmp/" "${RSYNC_DEST}"

deploy_pdf_dev:
  <<: *script_deploy_pdf
  <<: *only_dev
  variables:
    CI_DEPLOY_TYPE: "DEV"
    PROJECT_PATH: ${CI_COMMIT_REF_NAME%-*}/$CI_PROJECT_PATH/

deploy_pdf_pre_prod:
  <<: *script_deploy_pdf
  <<: *only_pre_prod
  variables:
    CI_DEPLOY_TYPE: "PRE_PROD"
    PROJECT_PATH: ${CI_COMMIT_REF_NAME%-*}/$CI_PROJECT_PATH/

deploy_pdf_prod:
  <<: *stage_deploy
  <<: *script_deploy_pdf
  <<: *only_prod
  variables:
    CI_DEPLOY_TYPE: "PROD"
    PROJECT_PATH: ${CI_COMMIT_REF_NAME%-*}/$CI_PROJECT_PATH/

# Jobs in post_deploy stage
# -----------------------------------------------------------------------------
trigger_main_repo:
  <<: *stage_post_deploy
  <<: *only_trigger
  only:
    variables:
      - $MAIN_PROJECT && $MAIN_PROJECT != $CI_PROJECT_PATH
  trigger:
    include:
      - project: $MAIN_PROJECT
        ref: $CI_COMMIT_REF_NAME
        file: $MAIN_PROJECT_CI_PATH/.gitlab-ci.yml
    strategy: depend
  variables:
    MAIN_PROJECT_CI_PATH: ${MAIN_PROJECT_CI_PATH:-"."}

inform_triggers_variables:
  <<: *tag_docker
  <<: *image_docker
  <<: *stage_post_deploy
  <<: *only_trigger
  except:
    variables:
      - $MAIN_PROJECT
  script:
    - |
      if [[ -z "${MAIN_PROJECT}" ]]
      then
       echo -e "[32m
          INFO - To trigger a main repo documentation CI, you can set \n
          INFO - variable \`MAIN_PROJECT\`. Otherwise, you have nothing\n
          INFO - to do. If the CI you want to run is not at the root of\n
          INFO - the repo defined by variable \`MAIN_PROJECT\`. You can\n
          INFO - set the variable \`MAIN_PROJECT_CI_PATH\` which define\n
          INFO - the path to the file \`gitlab-ci.yaml\` to be run in  \n
          INFO - the \`MAIN_PROJECT\`."
      fi

# *****************************************************************************
# VIM MODELINE
# vim: fdm=indent
# *****************************************************************************

### END MKDOCS TEMPLATE ###


